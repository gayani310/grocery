/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.main.sub;

import com.grocery.db.DB;
import com.grocery.db.comman.SystemConfigData;
import java.util.Date;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.awt.Image;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Blob;
import java.util.Arrays;
import javax.imageio.ImageIO;

/**
 *
 * @author Gayani
 */
public class ItemManagement extends javax.swing.JFrame {

    private ImageIcon format = null;
    String fname = null;
    int s = 0;
    byte[] pimage = null;
    Blob my_blob = null;
    FileInputStream fis;

    /**
     * Creates new form Category
     */
    public ItemManagement() {
        initComponents();
        loabrand();
        loadcat();
        generateid();
        loadproid();
        table_update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_des = new javax.swing.JTextArea();
        btn_delete = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txt_brand = new javax.swing.JComboBox();
        txt_category = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txt_itemid = new javax.swing.JTextField();
        txt_itemname = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txt_unit = new javax.swing.JComboBox<>();
        btn_add = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        btn_clear = new javax.swing.JButton();
        imageicon_lb = new javax.swing.JLabel();
        add_image = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        combo_idsearch = new javax.swing.JComboBox<>();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel8.setText("Item");

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel9.setText("Green Grocers");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14))); // NOI18N
        jPanel3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel10.setText("Item Image");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 30, 121, 45));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel11.setText("Description");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 133, 45));

        jLabel15.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel15.setText("Status");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 250, 80, 45));

        txt_des.setColumns(20);
        txt_des.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txt_des.setRows(5);
        jScrollPane2.setViewportView(txt_des);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 90, 430, 140));

        btn_delete.setBackground(new java.awt.Color(204, 204, 204));
        btn_delete.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        jPanel3.add(btn_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 310, 140, 45));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel13.setText("Category");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 116, 45));

        txt_brand.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jPanel3.add(txt_brand, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 270, 130, 42));

        txt_category.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        txt_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_categoryActionPerformed(evt);
            }
        });
        jPanel3.add(txt_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, 130, 42));

        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel14.setText("Brand");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, 82, 45));

        jLabel19.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel19.setText("Item ID");
        jPanel3.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 116, 45));

        jLabel20.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel20.setText("Item Name");
        jPanel3.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 116, 45));

        txt_itemid.setEditable(false);
        txt_itemid.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txt_itemid.setPreferredSize(new java.awt.Dimension(111, 23));
        jPanel3.add(txt_itemid, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 130, 45));

        txt_itemname.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txt_itemname.setPreferredSize(new java.awt.Dimension(111, 23));
        txt_itemname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_itemnameActionPerformed(evt);
            }
        });
        jPanel3.add(txt_itemname, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, 130, 45));

        jLabel21.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel21.setText("Unit");
        jPanel3.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 82, 43));

        txt_unit.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txt_unit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kg", "g", "Packets", "Pcs" }));
        txt_unit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_unitActionPerformed(evt);
            }
        });
        jPanel3.add(txt_unit, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 330, 130, 41));

        btn_add.setBackground(new java.awt.Color(204, 204, 204));
        btn_add.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_add.setText("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });
        jPanel3.add(btn_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 310, 140, 45));

        btn_update.setBackground(new java.awt.Color(204, 204, 204));
        btn_update.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        jPanel3.add(btn_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 310, 140, 45));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Inactive");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 260, 100, -1));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("Active");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 260, 100, -1));

        btn_clear.setBackground(new java.awt.Color(204, 204, 204));
        btn_clear.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });
        jPanel3.add(btn_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 310, 140, 45));
        jPanel3.add(imageicon_lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 80, 240, 220));

        add_image.setText("Add Image");
        add_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_imageActionPerformed(evt);
            }
        });
        jPanel3.add(add_image, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 30, 130, 40));

        jTable1.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Category", "Brand", "Unit", "Description", "Added Date", "Supplier", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel25.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel25.setText("Item ID");

        combo_idsearch.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        combo_idsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_idsearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1281, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_idsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(175, 175, 175)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_idsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1316, 739));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked


    }//GEN-LAST:event_jTable1MouseClicked
    Date d = new Date();
    SimpleDateFormat date1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    SimpleDateFormat date2 = new SimpleDateFormat("yyyy-MM-dd");
    String st1;
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        try {

            if (jRadioButton2.isSelected()) {
                int st = 1;
                st1 = "" + st;
            } else {
                int st = 0;
                st1 = "" + st;
            }

            DB.push("update  item set item_name = '" + txt_itemname.getText() + "',item_category = '" + txt_category.getSelectedItem().toString().split("-")[0]
                    + "' ,item_brand = '" + txt_brand.getSelectedItem().toString().split("-")[0]
                    + "' ,item_image = '" + my_blob
                    + "',item_unit = '" + txt_unit.getSelectedItem().toString()
                    + "',item_description = '" + txt_des.getText()
                    + "', emp_id = '" + SystemConfigData.getEmpid() + "' ,item_status = '" + st1 + "'   where item_id = '" + txt_itemid.getText() + "'");

            DB.push("update  stock set item_name = '" + txt_itemname.getText() + "',cat_id = '" + txt_category.getSelectedItem().toString().split("-")[0]
                    + "' ,brand_id = '" + txt_brand.getSelectedItem().toString().split("-")[0]
                    + "',item_unit = '" + txt_unit.getSelectedItem().toString()
                    + "', emp_id = '" + SystemConfigData.getEmpid() + "' ,status = '" + st1 + "'   where item_id = '" + txt_itemid.getText() + "'");

            JOptionPane.showMessageDialog(this, "Item update successfuly", "success", JOptionPane.INFORMATION_MESSAGE);
            table_update();
            loadproid();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed

        try {
            if (jRadioButton2.isSelected()) {
                int st = 1;
                st1 = "" + st;
            } else {
                int st = 0;
                st1 = "" + st;
            }

            if (fname != null) {

                InputStream file_data = new FileInputStream(fname);

                DB.push("INSERT INTO `item`(`item_id`,`item_name`, `item_image`, `item_image_file_name`,`item_category`, `item_brand`, `item_unit`, `item_description`, `item_currentdate`, `emp_id`, `item_status`) VALUES ('"
                        + Integer.parseInt(txt_itemid.getText())
                        + "','" + txt_itemname.getText()
                        + "','" + pimage
                        + "','" + fname
                        + "','" + txt_category.getSelectedItem().toString().split("-")[0]
                        + "','" + txt_brand.getSelectedItem().toString().split("-")[0]
                        + "','" + txt_unit.getSelectedItem().toString()
                        + "','" + txt_des.getText().toString()
                        + "','" + date1.format(d) + "','" + SystemConfigData.getEmpid() + "', '" + st1 + "')");

                DB.push("INSERT INTO `stock`(`grn_id`, `supplier_id`, `item_id`, `item_name`, `item_unit`, `cat_id`, `brand_id`, `qty`, `mfd`, `epd`, `cost_price`, `selling_price`, `total`, `emp_id`, `status`, `enddatetime`) VALUES ('"
                        + ""
                        + "','" + ""
                        + "','" + Integer.parseInt(txt_itemid.getText())
                        + "','" + txt_itemname.getText()
                        + "','" + txt_unit.getSelectedItem().toString()
                        + "','" + txt_category.getSelectedItem().toString().split("-")[0]
                        + "','" + txt_brand.getSelectedItem().toString().split("-")[0]
                        + "','" + 0.0
                        + "','" + ""
                        + "','" + ""
                        + "','" + 0.0
                        + "','" + 0.0
                        + "','" + 0.0
                        + "','" + SystemConfigData.getEmpid() + "', '" + st1 + "','" + date1.format(d) + "')");

                JOptionPane.showMessageDialog(this, "Item save successfuly", "success", JOptionPane.INFORMATION_MESSAGE);
                table_update();
                clear();
                generateid();
                loadproid();

            } else {
                JOptionPane.showMessageDialog(this, "Invalid data", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void txt_unitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_unitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_unitActionPerformed

    private void txt_itemnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_itemnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_itemnameActionPerformed

    private void txt_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_categoryActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed

        try {
            DB.push("UPDATE `item` SET `item_status`= 0 where item_id = '" + combo_idsearch.getSelectedItem().toString().trim() + "'");
            DB.push("UPDATE `stock` SET `status`= 0 where item_id = '" + combo_idsearch.getSelectedItem().toString().trim() + "'");
            JOptionPane.showMessageDialog(this, "Data daleted success", "success", JOptionPane.INFORMATION_MESSAGE);

            generateid();
            clear();
            table_update();
            loabrand();
            loadcat();
            generateid();
            loadproid();
            txt_itemid.setText(String.valueOf(itesmcount()));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_btn_clearActionPerformed

    private void combo_idsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_idsearchActionPerformed
        // TODO add your handling code here:

        try {

            ResultSet rs = DB.search("select * from item where item_id= '" + combo_idsearch.getSelectedItem() + "'");
            if (rs.next()) {
                boolean status = rs.getBoolean("item_status");
                if (status) {
                    txt_itemid.setText(rs.getString("item_id"));
                    txt_itemname.setText(rs.getString("item_name"));
                    txt_category.setSelectedItem(rs.getString("item_category"));
                    loadcat1((String) txt_category.getSelectedItem());
                    txt_brand.setSelectedItem(rs.getString("item_brand"));
                    loabrand1((String) txt_brand.getSelectedItem());
                    txt_unit.setSelectedItem(rs.getString("item_unit"));
                    txt_des.setText(rs.getString("item_description"));

                    fname = rs.getString("item_image_file_name");
                    File imageFile = new File(fname);
                    Image img = ImageIO.read(imageFile);
                    img = img.getScaledInstance(imageicon_lb.getWidth(), imageicon_lb.getHeight(), Image.SCALE_SMOOTH);
                    imageicon_lb.setIcon(new ImageIcon(img));

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_combo_idsearchActionPerformed

    private void add_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_imageActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(this);
        File file = fileChooser.getSelectedFile();
        fname = file.getAbsolutePath().replace("\\", "/");
        File targetDir = new File("D:\\Greengrocers\\Greengrocers\\src\\com\\grocery\\upload");
        File newfile = new File(targetDir, file.getName());

        try {

            Files.copy(file.toPath(), newfile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            fname = newfile.getAbsolutePath().replace("\\", "/");
            File imageFile = new File(fname);
            Image img = ImageIO.read(imageFile);
            img = img.getScaledInstance(imageicon_lb.getWidth(), imageicon_lb.getHeight(), Image.SCALE_SMOOTH);
            imageicon_lb.setIcon(new ImageIcon(img));

            FileInputStream fis = new FileInputStream(file);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);
            }
            pimage = bos.toByteArray();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, String.valueOf(ex), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_add_imageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_image;
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_update;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> combo_idsearch;
    private javax.swing.JLabel imageicon_lb;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox txt_brand;
    private javax.swing.JComboBox txt_category;
    private javax.swing.JTextArea txt_des;
    private javax.swing.JTextField txt_itemid;
    private javax.swing.JTextField txt_itemname;
    private javax.swing.JComboBox<String> txt_unit;
    // End of variables declaration//GEN-END:variables

    private void clear() {

        txt_itemname.setText(null);
//        txt_category.setSelectedIndex(-1);
//        txt_brand.setSelectedItem(-1);
//        txt_unit.setSelectedItem(-1);
        txt_des.setText(null);
        txt_itemid.setText(String.valueOf(itesmcount()));
        imageicon_lb.setIcon(null);

    }

    void table_update() {

        try {

            ResultSet rs = DB.search("select * from item where item_status = 1");
            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void loadcat() {
        try {
            ResultSet rs = DB.search("select * from category");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("cat_status");
                if (status) {

                    v.add(rs.getString("cat_id") + "-" + rs.getString("cat_name"));
                }
                txt_category.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void loabrand() {
        try {
            ResultSet rs = DB.search("select * from brand");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("brand_status");
                if (status) {

                    v.add(rs.getString("brand_id") + "-" + rs.getString("brand_name"));
                }
                txt_brand.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    void generateid() {
        try {
            ResultSet rs = DB.search("select count(*)as item_id from item");

            if (rs.next()) {
                int id = rs.getInt("item_id");
                String countid = "" + (++id);
                txt_itemid.setText(countid);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    void loadcat1(String cat1) {
        try {
            ResultSet rs = DB.search("select * from category where cat_id = '" + cat1 + "'");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("cat_status");
                if (status) {

                    v.add(rs.getString("cat_id") + "-" + rs.getString("cat_name"));
                }
                txt_category.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void loabrand1(String brand1) {
        try {
            ResultSet rs = DB.search("select * from brand where brand_id= '" + brand1 + "'");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("brand_status");
                if (status) {

                    v.add(rs.getString("brand_id") + "-" + rs.getString("brand_name"));
                }
                txt_brand.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    void loadproid() {
        try {
            ResultSet rs = DB.search("select * from item  where item_status = 1");
            Vector v = new Vector();
            while (rs.next()) {
                v.add(rs.getString("item_id"));
            }
            combo_idsearch.setModel(new DefaultComboBoxModel<>(v));
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    int itesmcount() {

        int count = 0;
        try {
            ResultSet rs = DB.search("select * from item");

            while (rs.next()) {
                count++;
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, String.valueOf(ex), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return count + 1;
    }

    private static void copyDirectory(File sourceDir, File targetDir) throws IOException {

        if (!targetDir.exists()) {
            targetDir.mkdir();
        }

        for (File sourceFile : sourceDir.listFiles()) {
            File targetFile = new File(targetDir, sourceFile.getName());
            if (sourceFile.isDirectory()) {
                copyDirectory(sourceFile, targetFile);
            } else {
                Files.copy(sourceFile.toPath(), targetFile.toPath());
            }
        }

    }

}
