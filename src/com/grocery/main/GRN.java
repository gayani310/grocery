/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grocery.main;

import com.grocery.db.DB;
import com.grocery.db.comman.SystemConfigData;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gayani
 */
public class GRN extends javax.swing.JInternalFrame {

    Date d = new Date();
    SimpleDateFormat date1 = new SimpleDateFormat("yyyy-MM-dd");
    int row;

    /**
     * Creates new form Category
     */
    public GRN() {
        initComponents();

        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI b1 = (BasicInternalFrameUI) this.getUI();
        b1.setNorthPane(null);
        grngenerate();
        item();
        brand();
        category();
        unit();
        tableload();
        poid();
        supplier();
        name();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        txt_productcode = new javax.swing.JPanel();
        txt_grnid = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        combo_supplier = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        txt_costp = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        combo_itemid = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        txt_qty = new javax.swing.JTextField();
        epd = new com.toedter.calendar.JDateChooser();
        mfd = new com.toedter.calendar.JDateChooser();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        txt_sellp = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txt_total = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        combo_brand = new javax.swing.JComboBox<>();
        combo_category = new javax.swing.JComboBox<>();
        combo_units = new javax.swing.JComboBox<>();
        btn_clear = new javax.swing.JButton();
        btn_data_table = new javax.swing.JButton();
        combo_name = new javax.swing.JComboBox<>();
        jLabel43 = new javax.swing.JLabel();
        txt_productcode1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        combo_poid_scb = new javax.swing.JComboBox<>();
        btn_update = new javax.swing.JButton();
        btn_del = new javax.swing.JButton();
        btn_delall = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1650, 910));

        jPanel2.setPreferredSize(new java.awt.Dimension(1000, 860));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel8.setText("GRN");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 136, -1));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel9.setText("Green Grocers");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 267, 30));

        txt_productcode.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14))); // NOI18N
        txt_productcode.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_grnid.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txt_grnid.setPreferredSize(new java.awt.Dimension(111, 23));
        txt_grnid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_grnidActionPerformed(evt);
            }
        });
        txt_grnid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_grnidKeyPressed(evt);
            }
        });
        txt_productcode.add(txt_grnid, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, 250, 34));

        jLabel34.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel34.setText("Supplier");
        txt_productcode.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 101, 45));

        jLabel35.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel35.setText("Item ID");
        txt_productcode.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 101, 33));

        combo_supplier.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txt_productcode.add(combo_supplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 250, 30));

        jLabel31.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel31.setText("EPD");
        txt_productcode.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 81, 40));

        txt_costp.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txt_costp.setPreferredSize(new java.awt.Dimension(111, 23));
        txt_costp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_costpActionPerformed(evt);
            }
        });
        txt_costp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_costpKeyPressed(evt);
            }
        });
        txt_productcode.add(txt_costp, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 250, 30));

        jLabel36.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel36.setText("Item Category");
        txt_productcode.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 140, 33));

        combo_itemid.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        combo_itemid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_itemidActionPerformed(evt);
            }
        });
        txt_productcode.add(combo_itemid, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 250, 30));

        jLabel37.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel37.setText("Item Brand");
        txt_productcode.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 101, 33));

        jLabel38.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel38.setText("GRN ID");
        txt_productcode.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 101, 34));

        txt_qty.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txt_qty.setPreferredSize(new java.awt.Dimension(111, 23));
        txt_qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_qtyActionPerformed(evt);
            }
        });
        txt_qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_qtyKeyPressed(evt);
            }
        });
        txt_productcode.add(txt_qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 260, 250, 30));
        txt_productcode.add(epd, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 330, 250, 30));
        txt_productcode.add(mfd, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, 250, 30));

        jLabel39.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel39.setText("Quantity");
        txt_productcode.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 81, 40));

        jLabel40.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel40.setText("MFD");
        txt_productcode.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 81, 40));

        jLabel41.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel41.setText("Cost Price");
        txt_productcode.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 100, 40));

        jLabel32.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel32.setText("Selling Price");
        txt_productcode.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 110, 30));

        txt_sellp.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txt_sellp.setPreferredSize(new java.awt.Dimension(111, 23));
        txt_sellp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_sellpActionPerformed(evt);
            }
        });
        txt_sellp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_sellpKeyPressed(evt);
            }
        });
        txt_productcode.add(txt_sellp, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, 250, 30));

        jLabel30.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel30.setText("Total");
        txt_productcode.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 81, 40));

        txt_total.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        txt_total.setPreferredSize(new java.awt.Dimension(111, 23));
        txt_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalActionPerformed(evt);
            }
        });
        txt_total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_totalKeyPressed(evt);
            }
        });
        txt_productcode.add(txt_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, 250, 30));

        jLabel42.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel42.setText("Units");
        txt_productcode.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 80, 40));

        combo_brand.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        combo_brand.setEnabled(false);
        combo_brand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_brandActionPerformed(evt);
            }
        });
        txt_productcode.add(combo_brand, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, 250, 30));

        combo_category.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        combo_category.setEnabled(false);
        combo_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_categoryActionPerformed(evt);
            }
        });
        txt_productcode.add(combo_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, 250, 30));

        combo_units.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        combo_units.setEnabled(false);
        combo_units.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_unitsActionPerformed(evt);
            }
        });
        txt_productcode.add(combo_units, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 250, -1));

        btn_clear.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/grocery/images/1447px-Icons8_flat_delete_generic.svg.png"))); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });
        txt_productcode.add(btn_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 140, 40));

        btn_data_table.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_data_table.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/grocery/images/add-6332692-5209363.png"))); // NOI18N
        btn_data_table.setText("Add");
        btn_data_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_data_tableActionPerformed(evt);
            }
        });
        txt_productcode.add(btn_data_table, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 470, 150, 40));

        combo_name.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        combo_name.setEnabled(false);
        combo_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_nameActionPerformed(evt);
            }
        });
        txt_productcode.add(combo_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 250, 30));

        jLabel43.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel43.setText("Item Name");
        txt_productcode.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 140, 33));

        txt_productcode1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Added GRN", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14))); // NOI18N
        txt_productcode1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN ID", "Supplier ID", "Name", "Category", "Brand ", "Quantity", "Cost price", "Selling Price", "Total", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(7).setResizable(false);
        }

        txt_productcode1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 500, 180));

        jTable2.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN ID", "Supplier ID", "Item ID", "Item Name", "Brand", "Category", "Units", "Quantity", "MFD", "EFD", "Cost price", "Selling Price", "Total", "Emp ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(6).setResizable(false);
        }

        txt_productcode1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 500, 170));

        combo_poid_scb.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        combo_poid_scb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_poid_scbActionPerformed(evt);
            }
        });
        txt_productcode1.add(combo_poid_scb, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 120, 30));

        btn_update.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/grocery/images/6372226.png"))); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        txt_productcode1.add(btn_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, 50));

        btn_del.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/grocery/images/erase_delete_remove_wipe_out-512.png"))); // NOI18N
        btn_del.setText("Delete");
        btn_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delActionPerformed(evt);
            }
        });
        txt_productcode1.add(btn_del, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 470, 150, 50));

        btn_delall.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_delall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/grocery/images/delete-5123.png"))); // NOI18N
        btn_delall.setText("Delete All");
        btn_delall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delallActionPerformed(evt);
            }
        });
        txt_productcode1.add(btn_delall, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 180, 50));

        btn_save.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/grocery/images/2039031.png"))); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });
        txt_productcode1.add(btn_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 470, 140, 50));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(txt_productcode, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_productcode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(txt_productcode1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(279, 279, 279))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_productcode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(294, 294, 294))
        );

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 60, 1000, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(997, 616));
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        int row = jTable1.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();

        combo_supplier.setSelectedItem(dtm.getValueAt(row, 2).toString().trim());
        combo_itemid.setSelectedItem(dtm.getValueAt(row, 4).toString().trim());
        txt_qty.setText(dtm.getValueAt(row, 8).toString().trim());

    }//GEN-LAST:event_jTable1MouseClicked

    private void txt_totalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_totalKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalKeyPressed

    private void txt_totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalActionPerformed

    private void txt_grnidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_grnidKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_grnidKeyPressed

    private void txt_grnidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_grnidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_grnidActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:

        row = jTable2.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();

        try {
            txt_grnid.setText(dtm.getValueAt(row, 0).toString().trim());
            combo_supplier.setSelectedItem(dtm.getValueAt(row, 1).toString().trim());
            combo_itemid.setSelectedItem(dtm.getValueAt(row, 2).toString().trim());

            txt_qty.setText(dtm.getValueAt(row, 7).toString().trim());
            String sDate1 = dtm.getValueAt(row, 8).toString().trim();
            String sDate2 = dtm.getValueAt(row, 9).toString().trim();
            txt_costp.setText(dtm.getValueAt(row, 10).toString().trim());
            txt_sellp.setText(dtm.getValueAt(row, 11).toString().trim());
            txt_total.setText(dtm.getValueAt(row, 12).toString().trim());

            Date date1 = new SimpleDateFormat("yyyy-MM-dd").parse(sDate1);
            mfd.setDate(date1);

            Date date2 = new SimpleDateFormat("yyyy-MM-dd").parse(sDate2);
            epd.setDate(date2);

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, String.valueOf(ex), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jTable2MouseClicked

    private void txt_costpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_costpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_costpActionPerformed

    private void txt_costpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_costpKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_costpKeyPressed

    private void txt_sellpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_sellpActionPerformed
        try {
            int qty = Integer.parseInt(txt_qty.getText());
            double unitprice = Double.parseDouble(txt_sellp.getText());
            if (!txt_qty.getText().trim().equals("") && !txt_sellp.getText().trim().equals("")) {
                txt_total.setText("" + qty * unitprice);
            } else {
                JOptionPane.showMessageDialog(this, "Qty or unit price not valied", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txt_sellpActionPerformed

    private void txt_sellpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_sellpKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_sellpKeyPressed

    private void combo_itemidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_itemidActionPerformed
        if (txt_grnid.getText().trim().isEmpty()) {
            grngenerate();
        }

        try {
            ResultSet rs = DB.search("select * from item where item_id = '" + combo_itemid.getSelectedItem().toString() + "' and item_status = 1");
            if (rs.next()) {
                combo_name.setSelectedItem(rs.getString("item_name"));
                combo_category.setSelectedItem(rs.getString("item_category"));
                combo_brand.setSelectedItem(rs.getString("item_brand"));
                combo_units.setSelectedItem(rs.getString("item_unit"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_combo_itemidActionPerformed

    private void txt_qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_qtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_qtyActionPerformed

    private void txt_qtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_qtyKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_qtyKeyPressed

    private void combo_poid_scbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_poid_scbActionPerformed
        // TODO add your handling code here:

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            ResultSet rs = DB.search("select * from `purchasing_order` where po_id like '" + combo_poid_scb.getSelectedItem().toString() + "%' and `po_status`='1'");
            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_combo_poid_scbActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        String supplier = combo_supplier.getSelectedItem().toString();
        String itemid = combo_units.getSelectedItem().toString();
        try {
            if (!txt_qty.getText().toString().isEmpty()
                    && !txt_costp.getText().toString().isEmpty()
                    && !txt_sellp.getText().toString().isEmpty()
                    && !txt_total.getText().toString().isEmpty()) {

                DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
                dtm.setValueAt(txt_grnid.getText(), row, 0);
                dtm.setValueAt(combo_supplier.getSelectedItem(), row, 1);
                dtm.setValueAt(combo_itemid.getSelectedItem(), row, 2);
                dtm.setValueAt(combo_name.getSelectedItem(), row, 3);
                dtm.setValueAt(combo_category.getSelectedItem(), row, 4);
                dtm.setValueAt(combo_brand.getSelectedItem(), row, 5);
                dtm.setValueAt(combo_units.getSelectedItem(), row, 6);
                dtm.setValueAt(txt_qty.getText(), row, 7);
                dtm.setValueAt(date1.format(mfd.getDate()), row, 8);
                dtm.setValueAt(date1.format(epd.getDate()), row, 9);
                dtm.setValueAt(txt_costp.getText(), row, 10);
                dtm.setValueAt(txt_sellp.getText(), row, 11);
                dtm.setValueAt(txt_total.getText(), row, 12);
                dtm.setValueAt(SystemConfigData.getEmpid(), row, 13);
                txt_qty.setText(null);
                mfd.setDate(d);
                epd.setDate(d);
                txt_costp.setText(null);
                txt_sellp.setText(null);
                txt_total.setText(null);

                JOptionPane.showMessageDialog(this, "GRN updated successfully", "success", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(this, "Invalid data", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delActionPerformed
        // TODO add your handling code here:
        int select = jTable2.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        dtm.removeRow(select);
    }//GEN-LAST:event_btn_delActionPerformed

    private void btn_delallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delallActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        dtm.setRowCount(0);
        grngenerate();
    }//GEN-LAST:event_btn_delallActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

        try {

            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
            for (int row = 0; row < dtm.getRowCount(); row++) {

                String grn_id = dtm.getValueAt(row, 0).toString().trim();
                String supplier_id = dtm.getValueAt(row, 1).toString().trim();
                String item_id = dtm.getValueAt(row, 2).toString().trim();
                String item_name = dtm.getValueAt(row, 3).toString().trim();
                String item_unit = dtm.getValueAt(row, 4).toString().trim();
                String cat_id = dtm.getValueAt(row, 5).toString().trim();
                String brand_id = dtm.getValueAt(row, 6).toString().trim();
                String qty = dtm.getValueAt(row, 7).toString().trim();
                String manufactured_date = dtm.getValueAt(row, 8).toString().trim();
                String epd = dtm.getValueAt(row, 9).toString().trim();
                String cost_price = dtm.getValueAt(row, 10).toString().trim();
                String selling_price = dtm.getValueAt(row, 11).toString().trim();
                String total = dtm.getValueAt(row, 12).toString().trim();
                String emp_id = dtm.getValueAt(row, 13).toString().trim();
                int status = 1;

                DB.push("INSERT INTO `grn`(`grn_id`, `supplier_id`, `item_id`, `iteam_name`, `item_unit`, `cat_id`, `brand_id`, `qty`, `manufactured_date`, `epd`, `cost_price`, `selling_price`, `total`, `emp_id`, `status`) VALUES ('"
                        + grn_id + "','"
                        + supplier_id + "','"
                        + Integer.parseInt(item_id) + "','"
                        + item_name + "','"
                        + item_unit + "','"
                        + cat_id + "','"
                        + brand_id + "','"
                        + Integer.parseInt(qty) + "','"
                        + manufactured_date + "','"
                        + epd + "','"
                        + Double.parseDouble(cost_price) + "','"
                        + Double.parseDouble(selling_price) + "','"
                        + Double.parseDouble(total) + "','"
                        + emp_id + "','"
                        + status + "')");

                DB.push("update `purchasing_order` set `po_status` = '0' where item_id = '" + Integer.parseInt(item_id) + "'");
                DB.push("UPDATE `stock` SET `grn_id`='" + grn_id + "',`supplier_id`='" + supplier_id + "',`qty`='" + Integer.parseInt(qty) + "',`mfd`='" + manufactured_date + "',`epd`='" + epd + "',`cost_price`='" + Double.parseDouble(cost_price) + "',`selling_price`='" + Double.parseDouble(selling_price) + "',`total`='" + Double.parseDouble(total) + "' WHERE `item_id`= '" + item_id + "'");
            }
            grngenerate();
            item();
            brand();
            category();
            unit();
            tableload();
            poid();
            supplier();
            name();
            Clear();
            JOptionPane.showMessageDialog(this, "GRN saved", "GRN", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_saveActionPerformed

    private void combo_brandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_brandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_brandActionPerformed

    private void combo_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_categoryActionPerformed

    private void combo_unitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_unitsActionPerformed

    }//GEN-LAST:event_combo_unitsActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        // TODO add your handling code here:
        txt_qty.setText(null);
        mfd.setDate(d);
        epd.setDate(d);
        txt_costp.setText(null);
        txt_sellp.setText(null);
        txt_total.setText(null);
    }//GEN-LAST:event_btn_clearActionPerformed

    private void btn_data_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_data_tableActionPerformed
        // TODO add your handling code here:

        if (!txt_qty.getText().toString().isEmpty()
                && !txt_costp.getText().toString().isEmpty()
                && !txt_sellp.getText().toString().isEmpty()
                && !txt_total.getText().toString().isEmpty()) {

            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();

            Vector v = new Vector();

            SimpleDateFormat date1 = new SimpleDateFormat("yyyy-MM-dd");
            String getdate;

            v.add(txt_grnid.getText());
            v.add(combo_supplier.getSelectedItem());
            v.add(combo_itemid.getSelectedItem());
            v.add(combo_name.getSelectedItem());
            v.add(combo_units.getSelectedItem());
            v.add(combo_category.getSelectedItem());
            v.add(combo_brand.getSelectedItem());
            v.add(txt_qty.getText());
            v.add(date1.format(mfd.getDate()));
            v.add(date1.format(epd.getDate()));
            v.add(txt_costp.getText());
            v.add(txt_sellp.getText());
            v.add(txt_total.getText());
            v.add(SystemConfigData.getEmpid());
            dtm.addRow(v);
            txt_qty.setText(null);
            mfd.setDate(d);
            epd.setDate(d);
            txt_costp.setText(null);
            txt_sellp.setText(null);
            txt_total.setText(null);

        } else {
            JOptionPane.showMessageDialog(this, "Plese type valid data", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btn_data_tableActionPerformed

    private void combo_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_nameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_data_table;
    private javax.swing.JButton btn_del;
    private javax.swing.JButton btn_delall;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> combo_brand;
    private javax.swing.JComboBox<String> combo_category;
    private javax.swing.JComboBox<String> combo_itemid;
    private javax.swing.JComboBox<String> combo_name;
    private javax.swing.JComboBox<String> combo_poid_scb;
    private javax.swing.JComboBox<String> combo_supplier;
    private javax.swing.JComboBox<String> combo_units;
    private com.toedter.calendar.JDateChooser epd;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private com.toedter.calendar.JDateChooser mfd;
    private javax.swing.JTextField txt_costp;
    private javax.swing.JTextField txt_grnid;
    private javax.swing.JPanel txt_productcode;
    private javax.swing.JPanel txt_productcode1;
    private javax.swing.JTextField txt_qty;
    private javax.swing.JTextField txt_sellp;
    private javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables

    private void poid() {

        String check = "";
        int id = 0;
        try {
            ResultSet rs = DB.search("SELECT * FROM `purchasing_order` where po_status=1");
            Vector v = new Vector();
            while (rs.next()) {

                if (!rs.getString("po_id").matches(check)) {

                    check = rs.getString("po_id");
                    v.add(rs.getString("po_id"));
                    combo_poid_scb.setModel(new DefaultComboBoxModel<>(v));

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void grngenerate() {
        String check = "";
        int id = 0;
        try {
            ResultSet rs = DB.search("SELECT * FROM `grn`");
            while (rs.next()) {

                if (!rs.getString("grn_id").matches(check)) {

                    check = rs.getString("grn_id");

                    id++;

                }
            }
            txt_grnid.setText("Grn" + (++id));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Clear() {

        DefaultTableModel dtm1 = (DefaultTableModel) jTable2.getModel();
        dtm1.setRowCount(0);

        txt_qty.setText(null);
        mfd.setDate(d);
        epd.setDate(d);
        txt_costp.setText(null);
        txt_sellp.setText(null);
        txt_total.setText(null);
    }

    void supplier() {
        try {
            ResultSet rs = DB.search("select * from supplier");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("status");
                if (status) {
                    v.add(rs.getString("id"));
                }
                combo_supplier.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void item() {
        try {
            ResultSet rs = DB.search("select * from item");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("item_status");
                if (status) {
                    v.add(rs.getString("item_id"));
                }
                combo_itemid.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void tableload() {
        try {

            ResultSet rs = DB.search("SELECT * FROM `purchasing_order` where po_status = 1");
            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void brand() {
        try {
            ResultSet rs = DB.search("select * from item");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("item_status");
                if (status) {
                    v.add(rs.getString("item_brand"));
                }
                combo_brand.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void name() {
        try {

            ResultSet rs = DB.search("select * from item");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("item_status");
                if (status) {
                    v.add(rs.getString("item_name"));
                }
                combo_name.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void category() {
        try {
            ResultSet rs = DB.search("select * from item");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("item_status");
                if (status) {
                    v.add(rs.getString("item_category"));
                }
                combo_category.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    void unit() {
        try {
            ResultSet rs = DB.search("select * from item");
            Vector v = new Vector();
            while (rs.next()) {
                boolean status = rs.getBoolean("item_status");
                if (status) {
                    v.add(rs.getString("item_unit"));
                }
                combo_units.setModel(new DefaultComboBoxModel<>(v));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, String.valueOf(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

}
